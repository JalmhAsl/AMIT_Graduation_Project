
Project_Microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000396  00800060  00001066  000010fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008003f6  008003f6  00001490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e83  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d8  00000000  00000000  000034ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109b  00000000  00000000  00003ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00004f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d7  00000000  00000000  000052ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001417  00000000  00000000  00005ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ef 06 	call	0xdde	; 0xdde <main>
      8a:	0c 94 31 08 	jmp	0x1062	; 0x1062 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
      92:	84 30       	cpi	r24, 0x04	; 4
      94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
      96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_voidSetPinDirection+0xea>
      98:	68 30       	cpi	r22, 0x08	; 8
      9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
      9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_voidSetPinDirection+0xea>
      9e:	41 30       	cpi	r20, 0x01	; 1
      a0:	a1 f5       	brne	.+104    	; 0x10a <DIO_voidSetPinDirection+0x78>
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	89 f0       	breq	.+34     	; 0xc8 <DIO_voidSetPinDirection+0x36>
      a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_voidSetPinDirection+0x20>
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	c9 f0       	breq	.+50     	; 0xde <DIO_voidSetPinDirection+0x4c>
      ac:	83 30       	cpi	r24, 0x03	; 3
      ae:	11 f1       	breq	.+68     	; 0xf4 <DIO_voidSetPinDirection+0x62>
      b0:	08 95       	ret
      b2:	2a b3       	in	r18, 0x1a	; 26
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x2c>
      ba:	88 0f       	add	r24, r24
      bc:	99 1f       	adc	r25, r25
      be:	6a 95       	dec	r22
      c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x28>
      c2:	82 2b       	or	r24, r18
      c4:	8a bb       	out	0x1a, r24	; 26
      c6:	08 95       	ret
      c8:	27 b3       	in	r18, 0x17	; 23
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x42>
      d0:	88 0f       	add	r24, r24
      d2:	99 1f       	adc	r25, r25
      d4:	6a 95       	dec	r22
      d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x3e>
      d8:	82 2b       	or	r24, r18
      da:	87 bb       	out	0x17, r24	; 23
      dc:	08 95       	ret
      de:	24 b3       	in	r18, 0x14	; 20
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x58>
      e6:	88 0f       	add	r24, r24
      e8:	99 1f       	adc	r25, r25
      ea:	6a 95       	dec	r22
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x54>
      ee:	82 2b       	or	r24, r18
      f0:	84 bb       	out	0x14, r24	; 20
      f2:	08 95       	ret
      f4:	21 b3       	in	r18, 0x11	; 17
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_voidSetPinDirection+0x6e>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_voidSetPinDirection+0x6a>
     104:	82 2b       	or	r24, r18
     106:	81 bb       	out	0x11, r24	; 17
     108:	08 95       	ret
     10a:	41 11       	cpse	r20, r1
     10c:	37 c0       	rjmp	.+110    	; 0x17c <DIO_voidSetPinDirection+0xea>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	91 f0       	breq	.+36     	; 0x136 <DIO_voidSetPinDirection+0xa4>
     112:	28 f0       	brcs	.+10     	; 0x11e <DIO_voidSetPinDirection+0x8c>
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	d9 f0       	breq	.+54     	; 0x14e <DIO_voidSetPinDirection+0xbc>
     118:	83 30       	cpi	r24, 0x03	; 3
     11a:	29 f1       	breq	.+74     	; 0x166 <DIO_voidSetPinDirection+0xd4>
     11c:	08 95       	ret
     11e:	2a b3       	in	r18, 0x1a	; 26
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_voidSetPinDirection+0x98>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_voidSetPinDirection+0x94>
     12e:	80 95       	com	r24
     130:	82 23       	and	r24, r18
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret
     136:	27 b3       	in	r18, 0x17	; 23
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0xb0>
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0xac>
     146:	80 95       	com	r24
     148:	82 23       	and	r24, r18
     14a:	87 bb       	out	0x17, r24	; 23
     14c:	08 95       	ret
     14e:	24 b3       	in	r18, 0x14	; 20
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_voidSetPinDirection+0xc8>
     156:	88 0f       	add	r24, r24
     158:	99 1f       	adc	r25, r25
     15a:	6a 95       	dec	r22
     15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_voidSetPinDirection+0xc4>
     15e:	80 95       	com	r24
     160:	82 23       	and	r24, r18
     162:	84 bb       	out	0x14, r24	; 20
     164:	08 95       	ret
     166:	21 b3       	in	r18, 0x11	; 17
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0xe0>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	6a 95       	dec	r22
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0xdc>
     176:	80 95       	com	r24
     178:	82 23       	and	r24, r18
     17a:	81 bb       	out	0x11, r24	; 17
     17c:	08 95       	ret

0000017e <DIO_voidSetPortDirection>:
     17e:	84 30       	cpi	r24, 0x04	; 4
     180:	58 f5       	brcc	.+86     	; 0x1d8 <DIO_voidSetPortDirection+0x5a>
     182:	61 30       	cpi	r22, 0x01	; 1
     184:	a1 f4       	brne	.+40     	; 0x1ae <DIO_voidSetPortDirection+0x30>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	49 f0       	breq	.+18     	; 0x19c <DIO_voidSetPortDirection+0x1e>
     18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_voidSetPortDirection+0x18>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	49 f0       	breq	.+18     	; 0x1a2 <DIO_voidSetPortDirection+0x24>
     190:	83 30       	cpi	r24, 0x03	; 3
     192:	51 f0       	breq	.+20     	; 0x1a8 <DIO_voidSetPortDirection+0x2a>
     194:	08 95       	ret
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	8a bb       	out	0x1a, r24	; 26
     19a:	08 95       	ret
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	87 bb       	out	0x17, r24	; 23
     1a0:	08 95       	ret
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	84 bb       	out	0x14, r24	; 20
     1a6:	08 95       	ret
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	81 bb       	out	0x11, r24	; 17
     1ac:	08 95       	ret
     1ae:	61 11       	cpse	r22, r1
     1b0:	13 c0       	rjmp	.+38     	; 0x1d8 <DIO_voidSetPortDirection+0x5a>
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	49 f0       	breq	.+18     	; 0x1c8 <DIO_voidSetPortDirection+0x4a>
     1b6:	28 f0       	brcs	.+10     	; 0x1c2 <DIO_voidSetPortDirection+0x44>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	49 f0       	breq	.+18     	; 0x1ce <DIO_voidSetPortDirection+0x50>
     1bc:	83 30       	cpi	r24, 0x03	; 3
     1be:	51 f0       	breq	.+20     	; 0x1d4 <DIO_voidSetPortDirection+0x56>
     1c0:	08 95       	ret
     1c2:	8a b3       	in	r24, 0x1a	; 26
     1c4:	1a ba       	out	0x1a, r1	; 26
     1c6:	08 95       	ret
     1c8:	87 b3       	in	r24, 0x17	; 23
     1ca:	17 ba       	out	0x17, r1	; 23
     1cc:	08 95       	ret
     1ce:	84 b3       	in	r24, 0x14	; 20
     1d0:	14 ba       	out	0x14, r1	; 20
     1d2:	08 95       	ret
     1d4:	81 b3       	in	r24, 0x11	; 17
     1d6:	11 ba       	out	0x11, r1	; 17
     1d8:	08 95       	ret

000001da <DIO_voidSetPinValue>:
     1da:	84 30       	cpi	r24, 0x04	; 4
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <DIO_voidSetPinValue+0x6>
     1de:	72 c0       	rjmp	.+228    	; 0x2c4 <DIO_voidSetPinValue+0xea>
     1e0:	68 30       	cpi	r22, 0x08	; 8
     1e2:	08 f0       	brcs	.+2      	; 0x1e6 <DIO_voidSetPinValue+0xc>
     1e4:	6f c0       	rjmp	.+222    	; 0x2c4 <DIO_voidSetPinValue+0xea>
     1e6:	41 30       	cpi	r20, 0x01	; 1
     1e8:	a1 f5       	brne	.+104    	; 0x252 <DIO_voidSetPinValue+0x78>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	89 f0       	breq	.+34     	; 0x210 <DIO_voidSetPinValue+0x36>
     1ee:	28 f0       	brcs	.+10     	; 0x1fa <DIO_voidSetPinValue+0x20>
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	c9 f0       	breq	.+50     	; 0x226 <DIO_voidSetPinValue+0x4c>
     1f4:	83 30       	cpi	r24, 0x03	; 3
     1f6:	11 f1       	breq	.+68     	; 0x23c <DIO_voidSetPinValue+0x62>
     1f8:	08 95       	ret
     1fa:	2b b3       	in	r18, 0x1b	; 27
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x2c>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	6a 95       	dec	r22
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x28>
     20a:	82 2b       	or	r24, r18
     20c:	8b bb       	out	0x1b, r24	; 27
     20e:	08 95       	ret
     210:	28 b3       	in	r18, 0x18	; 24
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_voidSetPinValue+0x42>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_voidSetPinValue+0x3e>
     220:	82 2b       	or	r24, r18
     222:	88 bb       	out	0x18, r24	; 24
     224:	08 95       	ret
     226:	25 b3       	in	r18, 0x15	; 21
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinValue+0x58>
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	6a 95       	dec	r22
     234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinValue+0x54>
     236:	82 2b       	or	r24, r18
     238:	85 bb       	out	0x15, r24	; 21
     23a:	08 95       	ret
     23c:	22 b3       	in	r18, 0x12	; 18
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinValue+0x6e>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	6a 95       	dec	r22
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinValue+0x6a>
     24c:	82 2b       	or	r24, r18
     24e:	82 bb       	out	0x12, r24	; 18
     250:	08 95       	ret
     252:	41 11       	cpse	r20, r1
     254:	37 c0       	rjmp	.+110    	; 0x2c4 <DIO_voidSetPinValue+0xea>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	91 f0       	breq	.+36     	; 0x27e <DIO_voidSetPinValue+0xa4>
     25a:	28 f0       	brcs	.+10     	; 0x266 <DIO_voidSetPinValue+0x8c>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	d9 f0       	breq	.+54     	; 0x296 <DIO_voidSetPinValue+0xbc>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	29 f1       	breq	.+74     	; 0x2ae <DIO_voidSetPinValue+0xd4>
     264:	08 95       	ret
     266:	2b b3       	in	r18, 0x1b	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_voidSetPinValue+0x98>
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	6a 95       	dec	r22
     274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_voidSetPinValue+0x94>
     276:	80 95       	com	r24
     278:	82 23       	and	r24, r18
     27a:	8b bb       	out	0x1b, r24	; 27
     27c:	08 95       	ret
     27e:	28 b3       	in	r18, 0x18	; 24
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_voidSetPinValue+0xb0>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	6a 95       	dec	r22
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_voidSetPinValue+0xac>
     28e:	80 95       	com	r24
     290:	82 23       	and	r24, r18
     292:	88 bb       	out	0x18, r24	; 24
     294:	08 95       	ret
     296:	25 b3       	in	r18, 0x15	; 21
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_voidSetPinValue+0xc8>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_voidSetPinValue+0xc4>
     2a6:	80 95       	com	r24
     2a8:	82 23       	and	r24, r18
     2aa:	85 bb       	out	0x15, r24	; 21
     2ac:	08 95       	ret
     2ae:	22 b3       	in	r18, 0x12	; 18
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_voidSetPinValue+0xe0>
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	6a 95       	dec	r22
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_voidSetPinValue+0xdc>
     2be:	80 95       	com	r24
     2c0:	82 23       	and	r24, r18
     2c2:	82 bb       	out	0x12, r24	; 18
     2c4:	08 95       	ret

000002c6 <DIO_voidSetPortValue>:
     2c6:	84 30       	cpi	r24, 0x04	; 4
     2c8:	78 f4       	brcc	.+30     	; 0x2e8 <DIO_voidSetPortValue+0x22>
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	41 f0       	breq	.+16     	; 0x2de <DIO_voidSetPortValue+0x18>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_voidSetPortValue+0x14>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <DIO_voidSetPortValue+0x1c>
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_voidSetPortValue+0x20>
     2d8:	08 95       	ret
     2da:	6b bb       	out	0x1b, r22	; 27
     2dc:	08 95       	ret
     2de:	68 bb       	out	0x18, r22	; 24
     2e0:	08 95       	ret
     2e2:	65 bb       	out	0x15, r22	; 21
     2e4:	08 95       	ret
     2e6:	62 bb       	out	0x12, r22	; 18
     2e8:	08 95       	ret

000002ea <GLCD_voidSendCMD>:
     2ea:	cf 93       	push	r28
     2ec:	c8 2f       	mov	r28, r24
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	62 e0       	ldi	r22, 0x02	; 2
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	63 e0       	ldi	r22, 0x03	; 3
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     302:	6c 2f       	mov	r22, r28
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_voidSetPortValue>
     30a:	41 e0       	ldi	r20, 0x01	; 1
     30c:	64 e0       	ldi	r22, 0x04	; 4
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     314:	8a e1       	ldi	r24, 0x1A	; 26
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <GLCD_voidSendCMD+0x2c>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <GLCD_voidSendCMD+0x32>
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     326:	8a e1       	ldi	r24, 0x1A	; 26
     328:	8a 95       	dec	r24
     32a:	f1 f7       	brne	.-4      	; 0x328 <GLCD_voidSendCMD+0x3e>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <GLCD_voidSendCMD+0x44>
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <GLCD_voidSendData>:
     332:	cf 93       	push	r28
     334:	c8 2f       	mov	r28, r24
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	63 e0       	ldi	r22, 0x03	; 3
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     34a:	6c 2f       	mov	r22, r28
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_voidSetPortValue>
     352:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <__data_end>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <__data_end>
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	64 e0       	ldi	r22, 0x04	; 4
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     366:	8a e1       	ldi	r24, 0x1A	; 26
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <GLCD_voidSendData+0x36>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <GLCD_voidSendData+0x3c>
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	64 e0       	ldi	r22, 0x04	; 4
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     378:	8a e1       	ldi	r24, 0x1A	; 26
     37a:	8a 95       	dec	r24
     37c:	f1 f7       	brne	.-4      	; 0x37a <GLCD_voidSendData+0x48>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <GLCD_voidSendData+0x4e>
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <GLCD_voidSelectStartLine>:
     384:	80 34       	cpi	r24, 0x40	; 64
     386:	18 f4       	brcc	.+6      	; 0x38e <GLCD_voidSelectStartLine+0xa>
     388:	81 95       	neg	r24
     38a:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     38e:	08 95       	ret

00000390 <GLCD_voidSelectPage>:
     390:	cf 93       	push	r28
     392:	88 30       	cpi	r24, 0x08	; 8
     394:	38 f4       	brcc	.+14     	; 0x3a4 <GLCD_voidSelectPage+0x14>
     396:	c8 2f       	mov	r28, r24
     398:	88 eb       	ldi	r24, 0xB8	; 184
     39a:	8c 0f       	add	r24, r28
     39c:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     3a0:	c0 93 f7 03 	sts	0x03F7, r28	; 0x8003f7 <X_coord>
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <GLCD_voidSelectColumn>:
     3a8:	cf 93       	push	r28
     3aa:	c8 2f       	mov	r28, r24
     3ac:	80 34       	cpi	r24, 0x40	; 64
     3ae:	38 f4       	brcc	.+14     	; 0x3be <GLCD_voidSelectColumn+0x16>
     3b0:	80 e4       	ldi	r24, 0x40	; 64
     3b2:	8c 0f       	add	r24, r28
     3b4:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     3b8:	c0 93 f6 03 	sts	0x03F6, r28	; 0x8003f6 <__data_end>
     3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <GLCD_voidSelectColumn+0x28>
     3be:	80 ec       	ldi	r24, 0xC0	; 192
     3c0:	8c 0f       	add	r24, r28
     3c2:	80 34       	cpi	r24, 0x40	; 64
     3c4:	28 f4       	brcc	.+10     	; 0x3d0 <GLCD_voidSelectColumn+0x28>
     3c6:	8c 2f       	mov	r24, r28
     3c8:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     3cc:	c0 93 f6 03 	sts	0x03F6, r28	; 0x8003f6 <__data_end>
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <GLCD_voidSelectScreen>:
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	59 f4       	brne	.+22     	; 0x3ee <GLCD_voidSelectScreen+0x1a>
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     3ec:	08 95       	ret
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	59 f4       	brne	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     406:	08 95       	ret
     408:	83 30       	cpi	r24, 0x03	; 3
     40a:	51 f4       	brne	.+20     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     420:	08 95       	ret

00000422 <GLCD_voidSetXY>:
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	d8 2f       	mov	r29, r24
     428:	c6 2f       	mov	r28, r22
     42a:	60 34       	cpi	r22, 0x40	; 64
     42c:	38 f4       	brcc	.+14     	; 0x43c <GLCD_voidSetXY+0x1a>
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_voidSelectScreen>
     434:	8c 2f       	mov	r24, r28
     436:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_voidSelectColumn>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <GLCD_voidSetXY+0x2e>
     43c:	80 ec       	ldi	r24, 0xC0	; 192
     43e:	86 0f       	add	r24, r22
     440:	80 34       	cpi	r24, 0x40	; 64
     442:	30 f4       	brcc	.+12     	; 0x450 <GLCD_voidSetXY+0x2e>
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_voidSelectScreen>
     44a:	8c 2f       	mov	r24, r28
     44c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <GLCD_voidSelectColumn>
     450:	d8 30       	cpi	r29, 0x08	; 8
     452:	18 f4       	brcc	.+6      	; 0x45a <GLCD_voidSetXY+0x38>
     454:	8d 2f       	mov	r24, r29
     456:	0e 94 c8 01 	call	0x390	; 0x390 <GLCD_voidSelectPage>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <GLCD_voidWriteStr>:
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	7c 01       	movw	r14, r24
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	44 c0       	rjmp	.+136    	; 0x4fa <GLCD_voidWriteStr+0x9a>
     472:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <__data_end>
     476:	8b 37       	cpi	r24, 0x7B	; 123
     478:	68 f0       	brcs	.+26     	; 0x494 <GLCD_voidWriteStr+0x34>
     47a:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     47e:	88 30       	cpi	r24, 0x08	; 8
     480:	28 f4       	brcc	.+10     	; 0x48c <GLCD_voidWriteStr+0x2c>
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <GLCD_voidWriteStr+0x34>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	2e c0       	rjmp	.+92     	; 0x4f4 <GLCD_voidWriteStr+0x94>
     498:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     49c:	60 34       	cpi	r22, 0x40	; 64
     49e:	90 f4       	brcc	.+36     	; 0x4c4 <GLCD_voidWriteStr+0x64>
     4a0:	f8 01       	movw	r30, r16
     4a2:	80 81       	ld	r24, Z
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	e8 0f       	add	r30, r24
     4ae:	f9 1f       	adc	r31, r25
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	e0 5a       	subi	r30, 0xA0	; 160
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	ec 0f       	add	r30, r28
     4ba:	f1 1d       	adc	r31, r1
     4bc:	80 81       	ld	r24, Z
     4be:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <GLCD_voidWriteStr+0x92>
     4c4:	60 34       	cpi	r22, 0x40	; 64
     4c6:	a8 f0       	brcs	.+42     	; 0x4f2 <GLCD_voidWriteStr+0x92>
     4c8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     4cc:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     4d0:	f8 01       	movw	r30, r16
     4d2:	80 81       	ld	r24, Z
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	fc 01       	movw	r30, r24
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e8 0f       	add	r30, r24
     4de:	f9 1f       	adc	r31, r25
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	e0 5a       	subi	r30, 0xA0	; 160
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	ec 0f       	add	r30, r28
     4ea:	f1 1d       	adc	r31, r1
     4ec:	80 81       	ld	r24, Z
     4ee:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     4f2:	cf 5f       	subi	r28, 0xFF	; 255
     4f4:	c6 30       	cpi	r28, 0x06	; 6
     4f6:	80 f2       	brcs	.-96     	; 0x498 <GLCD_voidWriteStr+0x38>
     4f8:	df 5f       	subi	r29, 0xFF	; 255
     4fa:	87 01       	movw	r16, r14
     4fc:	0d 0f       	add	r16, r29
     4fe:	11 1d       	adc	r17, r1
     500:	f8 01       	movw	r30, r16
     502:	80 81       	ld	r24, Z
     504:	81 11       	cpse	r24, r1
     506:	b5 cf       	rjmp	.-150    	; 0x472 <GLCD_voidWriteStr+0x12>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <GLCD_voidWriteInt>:
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	80 31       	cpi	r24, 0x10	; 16
     520:	27 e2       	ldi	r18, 0x27	; 39
     522:	92 07       	cpc	r25, r18
     524:	58 f4       	brcc	.+22     	; 0x53c <GLCD_voidWriteInt+0x26>
     526:	88 3e       	cpi	r24, 0xE8	; 232
     528:	33 e0       	ldi	r19, 0x03	; 3
     52a:	93 07       	cpc	r25, r19
     52c:	48 f4       	brcc	.+18     	; 0x540 <GLCD_voidWriteInt+0x2a>
     52e:	84 36       	cpi	r24, 0x64	; 100
     530:	91 05       	cpc	r25, r1
     532:	40 f4       	brcc	.+16     	; 0x544 <GLCD_voidWriteInt+0x2e>
     534:	0a 97       	sbiw	r24, 0x0a	; 10
     536:	40 f0       	brcs	.+16     	; 0x548 <GLCD_voidWriteInt+0x32>
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	07 c0       	rjmp	.+14     	; 0x54a <GLCD_voidWriteInt+0x34>
     53c:	85 e0       	ldi	r24, 0x05	; 5
     53e:	05 c0       	rjmp	.+10     	; 0x54a <GLCD_voidWriteInt+0x34>
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	03 c0       	rjmp	.+6      	; 0x54a <GLCD_voidWriteInt+0x34>
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	01 c0       	rjmp	.+2      	; 0x54a <GLCD_voidWriteInt+0x34>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	83 30       	cpi	r24, 0x03	; 3
     54c:	09 f4       	brne	.+2      	; 0x550 <GLCD_voidWriteInt+0x3a>
     54e:	80 c0       	rjmp	.+256    	; 0x650 <GLCD_voidWriteInt+0x13a>
     550:	38 f4       	brcc	.+14     	; 0x560 <GLCD_voidWriteInt+0x4a>
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	09 f4       	brne	.+2      	; 0x558 <GLCD_voidWriteInt+0x42>
     556:	fc c0       	rjmp	.+504    	; 0x750 <GLCD_voidWriteInt+0x23a>
     558:	82 30       	cpi	r24, 0x02	; 2
     55a:	09 f4       	brne	.+2      	; 0x55e <GLCD_voidWriteInt+0x48>
     55c:	ba c0       	rjmp	.+372    	; 0x6d2 <GLCD_voidWriteInt+0x1bc>
     55e:	2d c1       	rjmp	.+602    	; 0x7ba <GLCD_voidWriteInt+0x2a4>
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	71 f1       	breq	.+92     	; 0x5c0 <GLCD_voidWriteInt+0xaa>
     564:	85 30       	cpi	r24, 0x05	; 5
     566:	49 f1       	breq	.+82     	; 0x5ba <GLCD_voidWriteInt+0xa4>
     568:	28 c1       	rjmp	.+592    	; 0x7ba <GLCD_voidWriteInt+0x2a4>
     56a:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     56e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     572:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     576:	9e 01       	movw	r18, r28
     578:	32 95       	swap	r19
     57a:	22 95       	swap	r18
     57c:	2f 70       	andi	r18, 0x0F	; 15
     57e:	23 27       	eor	r18, r19
     580:	3f 70       	andi	r19, 0x0F	; 15
     582:	23 27       	eor	r18, r19
     584:	a7 e4       	ldi	r26, 0x47	; 71
     586:	b3 e0       	ldi	r27, 0x03	; 3
     588:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	c0 96       	adiw	r24, 0x30	; 48
     59a:	fc 01       	movw	r30, r24
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	e8 0f       	add	r30, r24
     5a2:	f9 1f       	adc	r31, r25
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	e0 5a       	subi	r30, 0xA0	; 160
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	e1 0f       	add	r30, r17
     5ae:	f1 1d       	adc	r31, r1
     5b0:	80 81       	ld	r24, Z
     5b2:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     5b6:	1f 5f       	subi	r17, 0xFF	; 255
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <GLCD_voidWriteInt+0xa6>
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	16 30       	cpi	r17, 0x06	; 6
     5be:	a8 f2       	brcs	.-86     	; 0x56a <GLCD_voidWriteInt+0x54>
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	43 c0       	rjmp	.+134    	; 0x64a <GLCD_voidWriteInt+0x134>
     5c4:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     5c8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     5cc:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     5d0:	9e 01       	movw	r18, r28
     5d2:	36 95       	lsr	r19
     5d4:	27 95       	ror	r18
     5d6:	36 95       	lsr	r19
     5d8:	27 95       	ror	r18
     5da:	36 95       	lsr	r19
     5dc:	27 95       	ror	r18
     5de:	a5 ec       	ldi	r26, 0xC5	; 197
     5e0:	b0 e2       	ldi	r27, 0x20	; 32
     5e2:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     5e6:	ac 01       	movw	r20, r24
     5e8:	52 95       	swap	r21
     5ea:	42 95       	swap	r20
     5ec:	4f 70       	andi	r20, 0x0F	; 15
     5ee:	45 27       	eor	r20, r21
     5f0:	5f 70       	andi	r21, 0x0F	; 15
     5f2:	45 27       	eor	r20, r21
     5f4:	9a 01       	movw	r18, r20
     5f6:	ad ec       	ldi	r26, 0xCD	; 205
     5f8:	bc ec       	ldi	r27, 0xCC	; 204
     5fa:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	9c 01       	movw	r18, r24
     60c:	22 0f       	add	r18, r18
     60e:	33 1f       	adc	r19, r19
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	9a 01       	movw	r18, r20
     622:	28 1b       	sub	r18, r24
     624:	39 0b       	sbc	r19, r25
     626:	c9 01       	movw	r24, r18
     628:	c0 96       	adiw	r24, 0x30	; 48
     62a:	fc 01       	movw	r30, r24
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	8e 0f       	add	r24, r30
     632:	9f 1f       	adc	r25, r31
     634:	fc 01       	movw	r30, r24
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	e0 5a       	subi	r30, 0xA0	; 160
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	e1 0f       	add	r30, r17
     640:	f1 1d       	adc	r31, r1
     642:	80 81       	ld	r24, Z
     644:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     648:	1f 5f       	subi	r17, 0xFF	; 255
     64a:	16 30       	cpi	r17, 0x06	; 6
     64c:	08 f4       	brcc	.+2      	; 0x650 <GLCD_voidWriteInt+0x13a>
     64e:	ba cf       	rjmp	.-140    	; 0x5c4 <GLCD_voidWriteInt+0xae>
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	3d c0       	rjmp	.+122    	; 0x6ce <GLCD_voidWriteInt+0x1b8>
     654:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     658:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     65c:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     660:	9e 01       	movw	r18, r28
     662:	36 95       	lsr	r19
     664:	27 95       	ror	r18
     666:	36 95       	lsr	r19
     668:	27 95       	ror	r18
     66a:	ab e7       	ldi	r26, 0x7B	; 123
     66c:	b4 e1       	ldi	r27, 0x14	; 20
     66e:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     672:	ac 01       	movw	r20, r24
     674:	56 95       	lsr	r21
     676:	47 95       	ror	r20
     678:	9a 01       	movw	r18, r20
     67a:	ad ec       	ldi	r26, 0xCD	; 205
     67c:	bc ec       	ldi	r27, 0xCC	; 204
     67e:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	9c 01       	movw	r18, r24
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	9a 01       	movw	r18, r20
     6a6:	28 1b       	sub	r18, r24
     6a8:	39 0b       	sbc	r19, r25
     6aa:	c9 01       	movw	r24, r18
     6ac:	c0 96       	adiw	r24, 0x30	; 48
     6ae:	fc 01       	movw	r30, r24
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	8e 0f       	add	r24, r30
     6b6:	9f 1f       	adc	r25, r31
     6b8:	fc 01       	movw	r30, r24
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e0 5a       	subi	r30, 0xA0	; 160
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	e1 0f       	add	r30, r17
     6c4:	f1 1d       	adc	r31, r1
     6c6:	80 81       	ld	r24, Z
     6c8:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     6cc:	1f 5f       	subi	r17, 0xFF	; 255
     6ce:	16 30       	cpi	r17, 0x06	; 6
     6d0:	08 f2       	brcs	.-126    	; 0x654 <GLCD_voidWriteInt+0x13e>
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	3b c0       	rjmp	.+118    	; 0x74c <GLCD_voidWriteInt+0x236>
     6d6:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     6da:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     6de:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     6e2:	9e 01       	movw	r18, r28
     6e4:	ad ec       	ldi	r26, 0xCD	; 205
     6e6:	bc ec       	ldi	r27, 0xCC	; 204
     6e8:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     6ec:	ac 01       	movw	r20, r24
     6ee:	56 95       	lsr	r21
     6f0:	47 95       	ror	r20
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	56 95       	lsr	r21
     6f8:	47 95       	ror	r20
     6fa:	9a 01       	movw	r18, r20
     6fc:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	96 95       	lsr	r25
     706:	87 95       	ror	r24
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	9c 01       	movw	r18, r24
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	82 0f       	add	r24, r18
     720:	93 1f       	adc	r25, r19
     722:	9a 01       	movw	r18, r20
     724:	28 1b       	sub	r18, r24
     726:	39 0b       	sbc	r19, r25
     728:	c9 01       	movw	r24, r18
     72a:	c0 96       	adiw	r24, 0x30	; 48
     72c:	fc 01       	movw	r30, r24
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	8e 0f       	add	r24, r30
     734:	9f 1f       	adc	r25, r31
     736:	fc 01       	movw	r30, r24
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	e0 5a       	subi	r30, 0xA0	; 160
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	e1 0f       	add	r30, r17
     742:	f1 1d       	adc	r31, r1
     744:	80 81       	ld	r24, Z
     746:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     74a:	1f 5f       	subi	r17, 0xFF	; 255
     74c:	16 30       	cpi	r17, 0x06	; 6
     74e:	18 f2       	brcs	.-122    	; 0x6d6 <GLCD_voidWriteInt+0x1c0>
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	31 c0       	rjmp	.+98     	; 0x7b6 <GLCD_voidWriteInt+0x2a0>
     754:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <__data_end>
     758:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <X_coord>
     75c:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
     760:	9e 01       	movw	r18, r28
     762:	ad ec       	ldi	r26, 0xCD	; 205
     764:	bc ec       	ldi	r27, 0xCC	; 204
     766:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
     76a:	96 95       	lsr	r25
     76c:	87 95       	ror	r24
     76e:	96 95       	lsr	r25
     770:	87 95       	ror	r24
     772:	96 95       	lsr	r25
     774:	87 95       	ror	r24
     776:	9c 01       	movw	r18, r24
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	9e 01       	movw	r18, r28
     78e:	28 1b       	sub	r18, r24
     790:	39 0b       	sbc	r19, r25
     792:	c9 01       	movw	r24, r18
     794:	c0 96       	adiw	r24, 0x30	; 48
     796:	fc 01       	movw	r30, r24
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	8e 0f       	add	r24, r30
     79e:	9f 1f       	adc	r25, r31
     7a0:	fc 01       	movw	r30, r24
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	e0 5a       	subi	r30, 0xA0	; 160
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	e1 0f       	add	r30, r17
     7ac:	f1 1d       	adc	r31, r1
     7ae:	80 81       	ld	r24, Z
     7b0:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     7b4:	1f 5f       	subi	r17, 0xFF	; 255
     7b6:	16 30       	cpi	r17, 0x06	; 6
     7b8:	68 f2       	brcs	.-102    	; 0x754 <GLCD_voidWriteInt+0x23e>
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	08 95       	ret

000007c2 <GLCD_voidClearPage>:
     7c2:	cf 93       	push	r28
     7c4:	c8 2f       	mov	r28, r24
     7c6:	83 e0       	ldi	r24, 0x03	; 3
     7c8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_voidSelectScreen>
     7cc:	8c 2f       	mov	r24, r28
     7ce:	0e 94 c8 01 	call	0x390	; 0x390 <GLCD_voidSelectPage>
     7d2:	c0 e0       	ldi	r28, 0x00	; 0
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <GLCD_voidClearPage+0x1c>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     7dc:	cf 5f       	subi	r28, 0xFF	; 255
     7de:	c0 34       	cpi	r28, 0x40	; 64
     7e0:	d0 f3       	brcs	.-12     	; 0x7d6 <GLCD_voidClearPage+0x14>
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <GLCD_voidClearAll>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <GLCD_voidSelectScreen>
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
     7f2:	0d c0       	rjmp	.+26     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7f4:	88 eb       	ldi	r24, 0xB8	; 184
     7f6:	8d 0f       	add	r24, r29
     7f8:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     7fc:	c0 e0       	ldi	r28, 0x00	; 0
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     806:	cf 5f       	subi	r28, 0xFF	; 255
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	d0 f3       	brcs	.-12     	; 0x800 <__DATA_REGION_LENGTH__>
     80c:	df 5f       	subi	r29, 0xFF	; 255
     80e:	d8 30       	cpi	r29, 0x08	; 8
     810:	88 f3       	brcs	.-30     	; 0x7f4 <GLCD_voidClearAll+0xe>
     812:	80 e4       	ldi	r24, 0x40	; 64
     814:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     818:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <__data_end>
     81c:	88 eb       	ldi	r24, 0xB8	; 184
     81e:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     822:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <X_coord>
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <GLCD_voidInit>:
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPortDirection>
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_voidSetPortDirection>
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	67 e0       	ldi	r22, 0x07	; 7
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_voidSetPinValue>
     85a:	8e e3       	ldi	r24, 0x3E	; 62
     85c:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     860:	8f e3       	ldi	r24, 0x3F	; 63
     862:	9f e1       	ldi	r25, 0x1F	; 31
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
     868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
     86a:	00 00       	nop
     86c:	80 e4       	ldi	r24, 0x40	; 64
     86e:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     872:	8f e3       	ldi	r24, 0x3F	; 63
     874:	9f e1       	ldi	r25, 0x1F	; 31
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
     87e:	88 eb       	ldi	r24, 0xB8	; 184
     880:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     884:	8f e3       	ldi	r24, 0x3F	; 63
     886:	9f e1       	ldi	r25, 0x1F	; 31
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <__stack+0x29>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
     88e:	00 00       	nop
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	0e 94 c2 01 	call	0x384	; 0x384 <GLCD_voidSelectStartLine>
     896:	8f e3       	ldi	r24, 0x3F	; 63
     898:	9f e1       	ldi	r25, 0x1F	; 31
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
     8a0:	00 00       	nop
     8a2:	8f e3       	ldi	r24, 0x3F	; 63
     8a4:	0e 94 75 01 	call	0x2ea	; 0x2ea <GLCD_voidSendCMD>
     8a8:	8f e3       	ldi	r24, 0x3F	; 63
     8aa:	9f e1       	ldi	r25, 0x1F	; 31
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
     8b2:	00 00       	nop
     8b4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <GLCD_voidClearAll>
     8b8:	8f e3       	ldi	r24, 0x3F	; 63
     8ba:	9f e1       	ldi	r25, 0x1F	; 31
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <__stack+0x5d>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <__stack+0x63>
     8c2:	00 00       	nop
     8c4:	08 95       	ret

000008c6 <DisplayGraph>:

typedef		unsigned	long	int		L32 ;


void	DisplayGraph(u8 Scale_Factor, L32 Frequency)
{
     8c6:	2f 92       	push	r2
     8c8:	3f 92       	push	r3
     8ca:	4f 92       	push	r4
     8cc:	5f 92       	push	r5
     8ce:	6f 92       	push	r6
     8d0:	7f 92       	push	r7
     8d2:	8f 92       	push	r8
     8d4:	9f 92       	push	r9
     8d6:	af 92       	push	r10
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	28 97       	sbiw	r28, 0x08	; 8
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	48 2e       	mov	r4, r24
     8fc:	4a 01       	movw	r8, r20
     8fe:	5b 01       	movw	r10, r22
	/*---------------------------------- Display PWM Information ---------------------------------*/
	u8 OCR_Val = TMR2_u8ReadOCR2();
     900:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TMR2_u8ReadOCR2>
     904:	58 2e       	mov	r5, r24
	u8 Compare_Output_Mode = TMR2_u8ReadCompareOuputMode();
     906:	0e 94 51 07 	call	0xea2	; 0xea2 <TMR2_u8ReadCompareOuputMode>
     90a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Wave_Generation_Mode = TMR2_ReadWaveGenerMode();
     90c:	0e 94 56 07 	call	0xeac	; 0xeac <TMR2_ReadWaveGenerMode>
     910:	89 83       	std	Y+1, r24	; 0x01
	u16 Prescaler = TMR2_u16ReadPrescalerMode();
     912:	0e 94 53 07 	call	0xea6	; 0xea6 <TMR2_u16ReadPrescalerMode>
	/*	Keeps track of units of frequency	*/
	u8 isHz;

	
	/*	Checks if timer's wave generation mode is Fast PWM	*/
	if(Wave_Generation_Mode == TMR_FAST_PWM_MODE) 
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	23 30       	cpi	r18, 0x03	; 3
     91a:	09 f0       	breq	.+2      	; 0x91e <DisplayGraph+0x58>
     91c:	61 c0       	rjmp	.+194    	; 0x9e0 <DisplayGraph+0x11a>
	{
		if(Frequency/Prescaler/256 > 0)	// Checks if frequency is greater than 1 Hz
     91e:	6c 01       	movw	r12, r24
     920:	e1 2c       	mov	r14, r1
     922:	f1 2c       	mov	r15, r1
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	a7 01       	movw	r20, r14
     92a:	96 01       	movw	r18, r12
     92c:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     930:	2f 3f       	cpi	r18, 0xFF	; 255
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	81 f0       	breq	.+32     	; 0x95a <DisplayGraph+0x94>
     93a:	78 f0       	brcs	.+30     	; 0x95a <DisplayGraph+0x94>
		{
			Frequ = Frequency/Prescaler/256;
     93c:	bb 27       	eor	r27, r27
     93e:	a5 2f       	mov	r26, r21
     940:	94 2f       	mov	r25, r20
     942:	83 2f       	mov	r24, r19
     944:	8c 01       	movw	r16, r24
			Time_Period = 1000/Frequ;
     946:	88 ee       	ldi	r24, 0xE8	; 232
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	b8 01       	movw	r22, r16
     94c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodhi4>
     950:	7e 83       	std	Y+6, r23	; 0x06
     952:	6d 83       	std	Y+5, r22	; 0x05
			isHz = 1;
     954:	ff 24       	eor	r15, r15
     956:	f3 94       	inc	r15
     958:	1c c0       	rjmp	.+56     	; 0x992 <DisplayGraph+0xcc>
		}
		else
		{
			Frequ = Frequency*1000/Prescaler/256;
     95a:	a8 ee       	ldi	r26, 0xE8	; 232
     95c:	b3 e0       	ldi	r27, 0x03	; 3
     95e:	a5 01       	movw	r20, r10
     960:	94 01       	movw	r18, r8
     962:	0e 94 26 08 	call	0x104c	; 0x104c <__muluhisi3>
     966:	a7 01       	movw	r20, r14
     968:	96 01       	movw	r18, r12
     96a:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     96e:	bb 27       	eor	r27, r27
     970:	a5 2f       	mov	r26, r21
     972:	94 2f       	mov	r25, r20
     974:	83 2f       	mov	r24, r19
     976:	8c 01       	movw	r16, r24
			Time_Period = 1000000/Frequ;
     978:	9c 01       	movw	r18, r24
     97a:	ad 01       	movw	r20, r26
     97c:	44 27       	eor	r20, r20
     97e:	55 27       	eor	r21, r21
     980:	60 e4       	ldi	r22, 0x40	; 64
     982:	72 e4       	ldi	r23, 0x42	; 66
     984:	8f e0       	ldi	r24, 0x0F	; 15
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 f8 07 	call	0xff0	; 0xff0 <__divmodsi4>
     98c:	3e 83       	std	Y+6, r19	; 0x06
     98e:	2d 83       	std	Y+5, r18	; 0x05
			isHz = 0;
     990:	f1 2c       	mov	r15, r1
		}
		
		if(Compare_Output_Mode == TMR_OC_CLEAR_OUTPUT) {Duty_Cycle = ((OCR_Val + 1)*100)/256;}
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	81 f4       	brne	.+32     	; 0x9b8 <DisplayGraph+0xf2>
     998:	25 2d       	mov	r18, r5
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	2f 5f       	subi	r18, 0xFF	; 255
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	44 e6       	ldi	r20, 0x64	; 100
     9a2:	42 9f       	mul	r20, r18
     9a4:	c0 01       	movw	r24, r0
     9a6:	43 9f       	mul	r20, r19
     9a8:	90 0d       	add	r25, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	99 23       	and	r25, r25
     9ae:	14 f4       	brge	.+4      	; 0x9b4 <DisplayGraph+0xee>
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	83 c0       	rjmp	.+262    	; 0xabe <DisplayGraph+0x1f8>
		else if(Compare_Output_Mode == TMR_OC_SET_OUTPUT) {Duty_Cycle = ((255 - OCR_Val)*100)/256;}
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	93 30       	cpi	r25, 0x03	; 3
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <DisplayGraph+0xfa>
     9be:	7c c0       	rjmp	.+248    	; 0xab8 <DisplayGraph+0x1f2>
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	25 19       	sub	r18, r5
     9c6:	31 09       	sbc	r19, r1
     9c8:	44 e6       	ldi	r20, 0x64	; 100
     9ca:	42 9f       	mul	r20, r18
     9cc:	c0 01       	movw	r24, r0
     9ce:	43 9f       	mul	r20, r19
     9d0:	90 0d       	add	r25, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	99 23       	and	r25, r25
     9d6:	14 f4       	brge	.+4      	; 0x9dc <DisplayGraph+0x116>
     9d8:	81 50       	subi	r24, 0x01	; 1
     9da:	9f 4f       	sbci	r25, 0xFF	; 255
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	6f c0       	rjmp	.+222    	; 0xabe <DisplayGraph+0x1f8>
	}
	
	
	/*	Checks if timer's wave generation mode is Phase Correct PWM	*/
	else if (Wave_Generation_Mode == TMR_PWM_PHASE_CORRECT_MODE) 
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	21 30       	cpi	r18, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <DisplayGraph+0x122>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <DisplayGraph+0x1e0>
	{
		if(Frequency/Prescaler/510 > 0)
     9e8:	6c 01       	movw	r12, r24
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	c5 01       	movw	r24, r10
     9f0:	b4 01       	movw	r22, r8
     9f2:	a7 01       	movw	r20, r14
     9f4:	96 01       	movw	r18, r12
     9f6:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     9fa:	2e 3f       	cpi	r18, 0xFE	; 254
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	38 07       	cpc	r19, r24
     a00:	41 05       	cpc	r20, r1
     a02:	51 05       	cpc	r21, r1
     a04:	98 f0       	brcs	.+38     	; 0xa2c <DisplayGraph+0x166>
		{
			Frequ = Frequency/Prescaler/510;
     a06:	ca 01       	movw	r24, r20
     a08:	b9 01       	movw	r22, r18
     a0a:	2e ef       	ldi	r18, 0xFE	; 254
     a0c:	31 e0       	ldi	r19, 0x01	; 1
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     a16:	89 01       	movw	r16, r18
			Time_Period = 1000/Frequ;
     a18:	88 ee       	ldi	r24, 0xE8	; 232
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	b9 01       	movw	r22, r18
     a1e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodhi4>
     a22:	7e 83       	std	Y+6, r23	; 0x06
     a24:	6d 83       	std	Y+5, r22	; 0x05
			isHz = 1;
     a26:	ff 24       	eor	r15, r15
     a28:	f3 94       	inc	r15
     a2a:	1e c0       	rjmp	.+60     	; 0xa68 <DisplayGraph+0x1a2>
		}
		else
		{
			Frequ = Frequency*1000/Prescaler/510;
     a2c:	a8 ee       	ldi	r26, 0xE8	; 232
     a2e:	b3 e0       	ldi	r27, 0x03	; 3
     a30:	a5 01       	movw	r20, r10
     a32:	94 01       	movw	r18, r8
     a34:	0e 94 26 08 	call	0x104c	; 0x104c <__muluhisi3>
     a38:	a7 01       	movw	r20, r14
     a3a:	96 01       	movw	r18, r12
     a3c:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     a40:	ca 01       	movw	r24, r20
     a42:	b9 01       	movw	r22, r18
     a44:	2e ef       	ldi	r18, 0xFE	; 254
     a46:	31 e0       	ldi	r19, 0x01	; 1
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
     a50:	89 01       	movw	r16, r18
			Time_Period = 1000000/Frequ;
     a52:	44 27       	eor	r20, r20
     a54:	55 27       	eor	r21, r21
     a56:	60 e4       	ldi	r22, 0x40	; 64
     a58:	72 e4       	ldi	r23, 0x42	; 66
     a5a:	8f e0       	ldi	r24, 0x0F	; 15
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__divmodsi4>
     a62:	3e 83       	std	Y+6, r19	; 0x06
     a64:	2d 83       	std	Y+5, r18	; 0x05
			isHz = 0;
     a66:	f1 2c       	mov	r15, r1
		}
		
		if(Compare_Output_Mode == TMR_OC_CLEAR_OUTPUT) {Duty_Cycle = (OCR_Val*100)/255;}
     a68:	9c 81       	ldd	r25, Y+4	; 0x04
     a6a:	92 30       	cpi	r25, 0x02	; 2
     a6c:	51 f4       	brne	.+20     	; 0xa82 <DisplayGraph+0x1bc>
     a6e:	24 e6       	ldi	r18, 0x64	; 100
     a70:	52 9e       	mul	r5, r18
     a72:	c0 01       	movw	r24, r0
     a74:	11 24       	eor	r1, r1
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divmodhi4>
     a7e:	6a 83       	std	Y+2, r22	; 0x02
     a80:	1e c0       	rjmp	.+60     	; 0xabe <DisplayGraph+0x1f8>
		else if(Compare_Output_Mode == TMR_OC_SET_OUTPUT) {Duty_Cycle = ((255 - OCR_Val)*100)/255;}
     a82:	8c 81       	ldd	r24, Y+4	; 0x04
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	d1 f4       	brne	.+52     	; 0xabc <DisplayGraph+0x1f6>
     a88:	6f ef       	ldi	r22, 0xFF	; 255
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	9b 01       	movw	r18, r22
     a8e:	25 19       	sub	r18, r5
     a90:	31 09       	sbc	r19, r1
     a92:	44 e6       	ldi	r20, 0x64	; 100
     a94:	42 9f       	mul	r20, r18
     a96:	c0 01       	movw	r24, r0
     a98:	43 9f       	mul	r20, r19
     a9a:	90 0d       	add	r25, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divmodhi4>
     aa2:	6a 83       	std	Y+2, r22	; 0x02
     aa4:	0c c0       	rjmp	.+24     	; 0xabe <DisplayGraph+0x1f8>
	
	
	/*	If wave generation mode is not PWM, writes error message and returns from function	*/
	else
	{
		GLCD_voidSetXY(5,0);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidWriteStr((u8*) "Please choose a PWM Mode");
     aae:	80 e6       	ldi	r24, 0x60	; 96
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
		return;
     ab6:	7a c1       	rjmp	.+756    	; 0xdac <DisplayGraph+0x4e6>
	u16 Prescaler = TMR2_u16ReadPrescalerMode();
	
	
	/*	Data displayed on screen	*/
	u16 Frequ = 0;
	u8 Duty_Cycle = 0;
     ab8:	1a 82       	std	Y+2, r1	; 0x02
     aba:	01 c0       	rjmp	.+2      	; 0xabe <DisplayGraph+0x1f8>
     abc:	1a 82       	std	Y+2, r1	; 0x02
		return;
	}
	
	
	/*	Display Frequency Info and checks the units of frequency	*/
	GLCD_voidSetXY(0,0);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
	GLCD_voidWriteStr((u8*) "Frequency: ");
     ac6:	89 e7       	ldi	r24, 0x79	; 121
     ac8:	93 e0       	ldi	r25, 0x03	; 3
     aca:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
	if(isHz)
     ace:	ff 20       	and	r15, r15
     ad0:	41 f0       	breq	.+16     	; 0xae2 <DisplayGraph+0x21c>
	{
		GLCD_voidWriteInt(Frequ);
     ad2:	c8 01       	movw	r24, r16
     ad4:	0e 94 8b 02 	call	0x516	; 0x516 <GLCD_voidWriteInt>
		GLCD_voidWriteStr((u8*) "Hz");
     ad8:	86 e8       	ldi	r24, 0x86	; 134
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <DisplayGraph+0x22a>
	}
	else
	{
		GLCD_voidWriteInt(Frequ);
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 8b 02 	call	0x516	; 0x516 <GLCD_voidWriteInt>
		GLCD_voidWriteStr((u8*) "mHz");
     ae8:	85 e8       	ldi	r24, 0x85	; 133
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
	}

	/*	Display Duty Cycle Info		*/
	GLCD_voidSetXY(1,0);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
	GLCD_voidWriteStr((u8*) "Duty Cycle: ");
     af8:	89 e8       	ldi	r24, 0x89	; 137
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
	GLCD_voidWriteInt(Duty_Cycle);
     b00:	2a 81       	ldd	r18, Y+2	; 0x02
     b02:	82 2f       	mov	r24, r18
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 8b 02 	call	0x516	; 0x516 <GLCD_voidWriteInt>
	GLCD_voidWriteStr((u8*) "%");
     b0a:	86 e9       	ldi	r24, 0x96	; 150
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
	
	/*	Display Separation Line		*/
	for (u8 i = 0; i < 128; i++)
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	0a c0       	rjmp	.+20     	; 0xb2a <DisplayGraph+0x264>
	{
		GLCD_voidSetXY(2,i);
     b16:	6a 81       	ldd	r22, Y+2	; 0x02
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidSendData(0b00011000);
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
	GLCD_voidWriteStr((u8*) "Duty Cycle: ");
	GLCD_voidWriteInt(Duty_Cycle);
	GLCD_voidWriteStr((u8*) "%");
	
	/*	Display Separation Line		*/
	for (u8 i = 0; i < 128; i++)
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	8a 83       	std	Y+2, r24	; 0x02
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	99 23       	and	r25, r25
     b2e:	9c f7       	brge	.-26     	; 0xb16 <DisplayGraph+0x250>
	/*	Scale Factor can take values of 2, 4, 8, 16 and 32. Any other value fails to draw a coherent graph.	*/
	/*	Each period on the graph has a width of 256/Scale Factor.											*/
	/*------------------------------------------------------------------------------------------------------*/
	
	/*	Check if Scale Factor has correct values	*/
	if(Scale_Factor != 2 && Scale_Factor != 4 && Scale_Factor != 8 && Scale_Factor != 16 && Scale_Factor != 32)
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	42 16       	cp	r4, r18
     b34:	a9 f0       	breq	.+42     	; 0xb60 <DisplayGraph+0x29a>
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	48 16       	cp	r4, r24
     b3a:	91 f0       	breq	.+36     	; 0xb60 <DisplayGraph+0x29a>
     b3c:	98 e0       	ldi	r25, 0x08	; 8
     b3e:	49 16       	cp	r4, r25
     b40:	79 f0       	breq	.+30     	; 0xb60 <DisplayGraph+0x29a>
     b42:	20 e1       	ldi	r18, 0x10	; 16
     b44:	42 16       	cp	r4, r18
     b46:	61 f0       	breq	.+24     	; 0xb60 <DisplayGraph+0x29a>
     b48:	80 e2       	ldi	r24, 0x20	; 32
     b4a:	48 16       	cp	r4, r24
     b4c:	49 f0       	breq	.+18     	; 0xb60 <DisplayGraph+0x29a>
	{
		GLCD_voidSetXY(5,0);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidWriteStr((u8*) "Prescaler must be 2, 4, 8, 16 or 32");
     b56:	88 e9       	ldi	r24, 0x98	; 152
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
		return;
     b5e:	26 c1       	rjmp	.+588    	; 0xdac <DisplayGraph+0x4e6>
	}
	
	u8 Pixel_Per_Period = 256 / Scale_Factor;
     b60:	64 2d       	mov	r22, r4
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divmodhi4>
     b6c:	6b 83       	std	Y+3, r22	; 0x03
     b6e:	a6 2e       	mov	r10, r22
     b70:	b7 2e       	mov	r11, r23
     b72:	86 2e       	mov	r8, r22
	
	u8 High = 0, Low = 0, Edge = 0;
	
	
	/*	Defines which Compare Output Mode is chosen	*/
	if(Compare_Output_Mode == TMR_OC_CLEAR_OUTPUT)
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	92 30       	cpi	r25, 0x02	; 2
     b78:	b1 f0       	breq	.+44     	; 0xba6 <DisplayGraph+0x2e0>
	{
		High = 0x01;
		Edge = 0xFF;
		Low = 0x80;
	}
	else if(Compare_Output_Mode == TMR_OC_SET_OUTPUT)
     b7a:	93 30       	cpi	r25, 0x03	; 3
     b7c:	c9 f0       	breq	.+50     	; 0xbb0 <DisplayGraph+0x2ea>
	{
		High = 0x80;
		Edge = 0xFF;
		Low = 0x01;
	}
	else if(Compare_Output_Mode == TMR_OC_DISCONNECT_OUTPUT)
     b7e:	91 11       	cpse	r25, r1
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <DisplayGraph+0x2ce>
	{
		GLCD_voidSetXY(5,0);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	85 e0       	ldi	r24, 0x05	; 5
     b86:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidWriteStr((u8*) "Output Disconnected");
     b8a:	8c eb       	ldi	r24, 0xBC	; 188
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
		return;
     b92:	0c c1       	rjmp	.+536    	; 0xdac <DisplayGraph+0x4e6>
	}
	else
	{
		GLCD_voidSetXY(5,0);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidWriteStr((u8*) "Bad Choice of Compare Output Mode");
     b9c:	80 ed       	ldi	r24, 0xD0	; 208
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
		return;
     ba4:	03 c1       	rjmp	.+518    	; 0xdac <DisplayGraph+0x4e6>
	/*	Defines which Compare Output Mode is chosen	*/
	if(Compare_Output_Mode == TMR_OC_CLEAR_OUTPUT)
	{
		High = 0x01;
		Edge = 0xFF;
		Low = 0x80;
     ba6:	20 e8       	ldi	r18, 0x80	; 128
     ba8:	2c 83       	std	Y+4, r18	; 0x04
	
	
	/*	Defines which Compare Output Mode is chosen	*/
	if(Compare_Output_Mode == TMR_OC_CLEAR_OUTPUT)
	{
		High = 0x01;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <DisplayGraph+0x2f2>
	}
	else if(Compare_Output_Mode == TMR_OC_SET_OUTPUT)
	{
		High = 0x80;
		Edge = 0xFF;
		Low = 0x01;
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	9c 83       	std	Y+4, r25	; 0x04
		Edge = 0xFF;
		Low = 0x80;
	}
	else if(Compare_Output_Mode == TMR_OC_SET_OUTPUT)
	{
		High = 0x80;
     bb4:	20 e8       	ldi	r18, 0x80	; 128
     bb6:	2a 83       	std	Y+2, r18	; 0x02
		return;
	}
	
	
	/*	Outer loop offsets period by X pixels each cycle	*/
	for(u8 Phase_Shift = 0; Phase_Shift < Graphical_LCD_Width; Phase_Shift+=Pixel_Per_Period)
     bb8:	1f 82       	std	Y+7, r1	; 0x07
	u8 Pixel_Per_Period = 256 / Scale_Factor;
	u8 Graphical_LCD_Width = 128;
	
	u8 TCNT_Period_Counter = 0;
	
	u8 text_position = 0;
     bba:	31 2c       	mov	r3, r1
	}
	
	u8 Pixel_Per_Period = 256 / Scale_Factor;
	u8 Graphical_LCD_Width = 128;
	
	u8 TCNT_Period_Counter = 0;
     bbc:	18 86       	std	Y+8, r1	; 0x08
		return;
	}
	
	
	/*	Outer loop offsets period by X pixels each cycle	*/
	for(u8 Phase_Shift = 0; Phase_Shift < Graphical_LCD_Width; Phase_Shift+=Pixel_Per_Period)
     bbe:	de c0       	rjmp	.+444    	; 0xd7c <DisplayGraph+0x4b6>
	{
		/*	OCR_Val is calculated to match GLCD scale and period	*/
		u8 OCR_Coord = (OCR_Val/Scale_Factor) + Phase_Shift;
     bc0:	85 2d       	mov	r24, r5
     bc2:	64 2d       	mov	r22, r4
     bc4:	0e 94 a2 07 	call	0xf44	; 0xf44 <__udivmodqi4>
     bc8:	9f 80       	ldd	r9, Y+7	; 0x07
     bca:	98 0e       	add	r9, r24
		
		/*	Wave generated by Fast PWM	*/
		if(Wave_Generation_Mode == TMR_FAST_PWM_MODE)
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <DisplayGraph+0x30e>
     bd2:	55 c0       	rjmp	.+170    	; 0xc7e <DisplayGraph+0x3b8>
     bd4:	44 c0       	rjmp	.+136    	; 0xc5e <DisplayGraph+0x398>
		{
			/*	Inner loop draws the curve according to OCR	*/
			for (u8 i = 0 + Phase_Shift; i < Pixel_Per_Period + Phase_Shift; i++)
			{
				GLCD_voidSetXY(5,i);
     bd6:	67 2d       	mov	r22, r7
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
				
				if(i < OCR_Coord)
     bde:	79 14       	cp	r7, r9
     be0:	20 f4       	brcc	.+8      	; 0xbea <DisplayGraph+0x324>
				GLCD_voidSendData(High);
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     be8:	1d c0       	rjmp	.+58     	; 0xc24 <DisplayGraph+0x35e>
				else if(i == OCR_Coord)
     bea:	79 10       	cpse	r7, r9
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <DisplayGraph+0x330>
				GLCD_voidSendData(Edge);
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <DisplayGraph+0x35e>
				else if(i > OCR_Coord && i < Pixel_Per_Period - 1 + Phase_Shift)
     bf6:	97 14       	cp	r9, r7
     bf8:	58 f4       	brcc	.+22     	; 0xc10 <DisplayGraph+0x34a>
     bfa:	c8 01       	movw	r24, r16
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	8c 0d       	add	r24, r12
     c00:	9d 1d       	adc	r25, r13
     c02:	e8 16       	cp	r14, r24
     c04:	f9 06       	cpc	r15, r25
     c06:	24 f4       	brge	.+8      	; 0xc10 <DisplayGraph+0x34a>
				GLCD_voidSendData(Low);
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     c0e:	0a c0       	rjmp	.+20     	; 0xc24 <DisplayGraph+0x35e>
				else if(i == Pixel_Per_Period - 1 + Phase_Shift)
     c10:	c8 01       	movw	r24, r16
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	8c 0d       	add	r24, r12
     c16:	9d 1d       	adc	r25, r13
     c18:	e8 16       	cp	r14, r24
     c1a:	f9 06       	cpc	r15, r25
     c1c:	19 f4       	brne	.+6      	; 0xc24 <DisplayGraph+0x35e>
				GLCD_voidSendData(Edge);
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
				
				/*	Draws lines of time period	*/
				if(TCNT_Period_Counter == 0)
     c24:	98 85       	ldd	r25, Y+8	; 0x08
     c26:	91 11       	cpse	r25, r1
     c28:	18 c0       	rjmp	.+48     	; 0xc5a <DisplayGraph+0x394>
				{
					GLCD_voidSetXY(6,i);
     c2a:	67 2d       	mov	r22, r7
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
					if(i == 0 + Phase_Shift || i == Pixel_Per_Period - 1 + Phase_Shift)
     c32:	2f 81       	ldd	r18, Y+7	; 0x07
     c34:	27 15       	cp	r18, r7
     c36:	39 f0       	breq	.+14     	; 0xc46 <DisplayGraph+0x380>
     c38:	01 50       	subi	r16, 0x01	; 1
     c3a:	11 09       	sbc	r17, r1
     c3c:	c0 0e       	add	r12, r16
     c3e:	d1 1e       	adc	r13, r17
     c40:	ec 14       	cp	r14, r12
     c42:	fd 04       	cpc	r15, r13
     c44:	21 f4       	brne	.+8      	; 0xc4e <DisplayGraph+0x388>
					GLCD_voidSendData(0xFC);
     c46:	8c ef       	ldi	r24, 0xFC	; 252
     c48:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <DisplayGraph+0x38e>
					else
					GLCD_voidSendData(0x10);
     c4e:	80 e1       	ldi	r24, 0x10	; 16
     c50:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
					
					text_position = i - Phase_Shift;
     c54:	37 2c       	mov	r3, r7
     c56:	8f 81       	ldd	r24, Y+7	; 0x07
     c58:	38 1a       	sub	r3, r24
		
		/*	Wave generated by Fast PWM	*/
		if(Wave_Generation_Mode == TMR_FAST_PWM_MODE)
		{
			/*	Inner loop draws the curve according to OCR	*/
			for (u8 i = 0 + Phase_Shift; i < Pixel_Per_Period + Phase_Shift; i++)
     c5a:	73 94       	inc	r7
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <DisplayGraph+0x39a>
     c5e:	7f 80       	ldd	r7, Y+7	; 0x07
     c60:	e7 2c       	mov	r14, r7
     c62:	f1 2c       	mov	r15, r1
     c64:	85 01       	movw	r16, r10
     c66:	11 27       	eor	r17, r17
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	c9 2e       	mov	r12, r25
     c6c:	d1 2c       	mov	r13, r1
     c6e:	c8 01       	movw	r24, r16
     c70:	8c 0d       	add	r24, r12
     c72:	9d 1d       	adc	r25, r13
     c74:	e8 16       	cp	r14, r24
     c76:	f9 06       	cpc	r15, r25
     c78:	0c f4       	brge	.+2      	; 0xc7c <DisplayGraph+0x3b6>
     c7a:	ad cf       	rjmp	.-166    	; 0xbd6 <DisplayGraph+0x310>
     c7c:	79 c0       	rjmp	.+242    	; 0xd70 <DisplayGraph+0x4aa>
			}
		}
		
		
		/*	Wave generated by Phase Correct PWM	*/
		else if(Wave_Generation_Mode == TMR_PWM_PHASE_CORRECT_MODE)
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	09 f0       	breq	.+2      	; 0xc86 <DisplayGraph+0x3c0>
     c84:	75 c0       	rjmp	.+234    	; 0xd70 <DisplayGraph+0x4aa>
     c86:	65 c0       	rjmp	.+202    	; 0xd52 <DisplayGraph+0x48c>
		{
			/*	Inner loop draws the curve according to OCR	*/
			for (u8 i = 0 + Phase_Shift; i < Pixel_Per_Period + Phase_Shift; i++)
			{
				GLCD_voidSetXY(5,i);
     c88:	62 2d       	mov	r22, r2
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
					
				if(TCNT_Period_Counter%2 == 0)
     c90:	88 85       	ldd	r24, Y+8	; 0x08
     c92:	81 70       	andi	r24, 0x01	; 1
     c94:	98 85       	ldd	r25, Y+8	; 0x08
     c96:	90 fd       	sbrc	r25, 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <DisplayGraph+0x3f8>
				{
					if(i < OCR_Coord)
     c9a:	29 14       	cp	r2, r9
     c9c:	20 f4       	brcc	.+8      	; 0xca6 <DisplayGraph+0x3e0>
					GLCD_voidSendData(High);
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     ca4:	29 c0       	rjmp	.+82     	; 0xcf8 <DisplayGraph+0x432>
					else if(i == OCR_Coord)
     ca6:	29 10       	cpse	r2, r9
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <DisplayGraph+0x3ec>
					GLCD_voidSendData(Edge);
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     cb0:	23 c0       	rjmp	.+70     	; 0xcf8 <DisplayGraph+0x432>
					else if(i > OCR_Coord)
     cb2:	92 14       	cp	r9, r2
     cb4:	08 f5       	brcc	.+66     	; 0xcf8 <DisplayGraph+0x432>
					GLCD_voidSendData(Low);
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     cbc:	1d c0       	rjmp	.+58     	; 0xcf8 <DisplayGraph+0x432>
				}
				
				else if(TCNT_Period_Counter%2 == 1)
     cbe:	88 23       	and	r24, r24
     cc0:	d9 f0       	breq	.+54     	; 0xcf8 <DisplayGraph+0x432>
				{
					if(i - Phase_Shift > Pixel_Per_Period + Phase_Shift - 1 - OCR_Coord)
     cc2:	c7 01       	movw	r24, r14
     cc4:	8c 19       	sub	r24, r12
     cc6:	9d 09       	sbc	r25, r13
     cc8:	01 50       	subi	r16, 0x01	; 1
     cca:	11 09       	sbc	r17, r1
     ccc:	09 19       	sub	r16, r9
     cce:	11 09       	sbc	r17, r1
     cd0:	08 17       	cp	r16, r24
     cd2:	19 07       	cpc	r17, r25
     cd4:	24 f4       	brge	.+8      	; 0xcde <DisplayGraph+0x418>
					GLCD_voidSendData(High);
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <DisplayGraph+0x432>
					else if(i - Phase_Shift == Pixel_Per_Period + Phase_Shift - 1 - OCR_Coord)
     cde:	80 17       	cp	r24, r16
     ce0:	91 07       	cpc	r25, r17
     ce2:	21 f4       	brne	.+8      	; 0xcec <DisplayGraph+0x426>
					GLCD_voidSendData(Edge);
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <DisplayGraph+0x432>
					else if(i - Phase_Shift < Pixel_Per_Period + Phase_Shift - 1 - OCR_Coord) //32 - 32 = 0 < 32 + 32 - 63 = 1
     cec:	80 17       	cp	r24, r16
     cee:	91 07       	cpc	r25, r17
     cf0:	1c f4       	brge	.+6      	; 0xcf8 <DisplayGraph+0x432>
					GLCD_voidSendData(Low);
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
				}
				
				
				
				/*	Displays lines of Time Period	*/
				if(TCNT_Period_Counter == 0)
     cf8:	28 85       	ldd	r18, Y+8	; 0x08
     cfa:	21 11       	cpse	r18, r1
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <DisplayGraph+0x45c>
				{
					GLCD_voidSetXY(6,i);
     cfe:	62 2d       	mov	r22, r2
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
					if(i == 0 + Phase_Shift)
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	82 11       	cpse	r24, r2
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <DisplayGraph+0x44e>
					GLCD_voidSendData(0xFC);
     d0c:	8c ef       	ldi	r24, 0xFC	; 252
     d0e:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <DisplayGraph+0x454>
					else
					GLCD_voidSendData(0x10);
     d14:	80 e1       	ldi	r24, 0x10	; 16
     d16:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
					
					text_position = i - Phase_Shift;
     d1a:	32 2c       	mov	r3, r2
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	39 1a       	sub	r3, r25
     d20:	16 c0       	rjmp	.+44     	; 0xd4e <DisplayGraph+0x488>
				}
				else if(TCNT_Period_Counter == 1)
     d22:	28 85       	ldd	r18, Y+8	; 0x08
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	99 f4       	brne	.+38     	; 0xd4e <DisplayGraph+0x488>
				{
					GLCD_voidSetXY(6,i);
     d28:	62 2d       	mov	r22, r2
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
					if(i == Pixel_Per_Period - 1 + Phase_Shift)
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	68 1a       	sub	r6, r24
     d34:	71 08       	sbc	r7, r1
     d36:	c6 0c       	add	r12, r6
     d38:	d7 1c       	adc	r13, r7
     d3a:	ec 14       	cp	r14, r12
     d3c:	fd 04       	cpc	r15, r13
     d3e:	21 f4       	brne	.+8      	; 0xd48 <DisplayGraph+0x482>
					GLCD_voidSendData(0xFC);
     d40:	8c ef       	ldi	r24, 0xFC	; 252
     d42:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <DisplayGraph+0x488>
					else
					GLCD_voidSendData(0x10);
     d48:	80 e1       	ldi	r24, 0x10	; 16
     d4a:	0e 94 99 01 	call	0x332	; 0x332 <GLCD_voidSendData>
		
		/*	Wave generated by Phase Correct PWM	*/
		else if(Wave_Generation_Mode == TMR_PWM_PHASE_CORRECT_MODE)
		{
			/*	Inner loop draws the curve according to OCR	*/
			for (u8 i = 0 + Phase_Shift; i < Pixel_Per_Period + Phase_Shift; i++)
     d4e:	23 94       	inc	r2
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <DisplayGraph+0x48e>
     d52:	2f 80       	ldd	r2, Y+7	; 0x07
     d54:	e2 2c       	mov	r14, r2
     d56:	f1 2c       	mov	r15, r1
     d58:	35 01       	movw	r6, r10
     d5a:	77 24       	eor	r7, r7
     d5c:	9f 81       	ldd	r25, Y+7	; 0x07
     d5e:	c9 2e       	mov	r12, r25
     d60:	d1 2c       	mov	r13, r1
     d62:	83 01       	movw	r16, r6
     d64:	0c 0d       	add	r16, r12
     d66:	1d 1d       	adc	r17, r13
     d68:	e0 16       	cp	r14, r16
     d6a:	f1 06       	cpc	r15, r17
     d6c:	0c f4       	brge	.+2      	; 0xd70 <DisplayGraph+0x4aa>
     d6e:	8c cf       	rjmp	.-232    	; 0xc88 <DisplayGraph+0x3c2>
					GLCD_voidSendData(0x10);
				}
			}
		}
		/*	Increment TCNT period counter after each iteration of outer for loop	*/	
		TCNT_Period_Counter++;
     d70:	28 85       	ldd	r18, Y+8	; 0x08
     d72:	2f 5f       	subi	r18, 0xFF	; 255
     d74:	28 87       	std	Y+8, r18	; 0x08
		return;
	}
	
	
	/*	Outer loop offsets period by X pixels each cycle	*/
	for(u8 Phase_Shift = 0; Phase_Shift < Graphical_LCD_Width; Phase_Shift+=Pixel_Per_Period)
     d76:	8f 81       	ldd	r24, Y+7	; 0x07
     d78:	88 0d       	add	r24, r8
     d7a:	8f 83       	std	Y+7, r24	; 0x07
     d7c:	9f 81       	ldd	r25, Y+7	; 0x07
     d7e:	90 38       	cpi	r25, 0x80	; 128
     d80:	08 f4       	brcc	.+2      	; 0xd84 <DisplayGraph+0x4be>
     d82:	1e cf       	rjmp	.-452    	; 0xbc0 <DisplayGraph+0x2fa>
		/*	Increment TCNT period counter after each iteration of outer for loop	*/	
		TCNT_Period_Counter++;
	}
	
	/*	Draws period value on last row	*/
	if (Wave_Generation_Mode == TMR_FAST_PWM_MODE || Wave_Generation_Mode == TMR_PWM_PHASE_CORRECT_MODE)
     d84:	29 81       	ldd	r18, Y+1	; 0x01
     d86:	23 30       	cpi	r18, 0x03	; 3
     d88:	11 f0       	breq	.+4      	; 0xd8e <DisplayGraph+0x4c8>
     d8a:	21 30       	cpi	r18, 0x01	; 1
     d8c:	79 f4       	brne	.+30     	; 0xdac <DisplayGraph+0x4e6>
	{
		/*	Position of Period Text		*/
		GLCD_voidSetXY(7,text_position - (Pixel_Per_Period/2));
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	86 95       	lsr	r24
     d92:	63 2d       	mov	r22, r3
     d94:	68 1b       	sub	r22, r24
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	0e 94 11 02 	call	0x422	; 0x422 <GLCD_voidSetXY>
		GLCD_voidWriteInt(Time_Period);
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	0e 94 8b 02 	call	0x516	; 0x516 <GLCD_voidWriteInt>
		GLCD_voidWriteStr((u8*) "ms");
     da4:	82 ef       	ldi	r24, 0xF2	; 242
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 30 02 	call	0x460	; 0x460 <GLCD_voidWriteStr>
	}
}
     dac:	28 96       	adiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
     dce:	8f 90       	pop	r8
     dd0:	7f 90       	pop	r7
     dd2:	6f 90       	pop	r6
     dd4:	5f 90       	pop	r5
     dd6:	4f 90       	pop	r4
     dd8:	3f 90       	pop	r3
     dda:	2f 90       	pop	r2
     ddc:	08 95       	ret

00000dde <main>:


int main(void)
{
	/*	Timer Pins Directions			*/
	DIO_voidSetPinDirection(PORTC, PIN6, INPUT);	//TOSC1
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	66 e0       	ldi	r22, 0x06	; 6
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN7, INPUT);	//TOSC2
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	67 e0       	ldi	r22, 0x07	; 7
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	
	DIO_voidSetPinDirection(PORTD, PIN7, OUTPUT);	//OC2
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	67 e0       	ldi	r22, 0x07	; 7
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	
	
	/*	GLCD and TMR2 initialization	*/
    GLCD_voidInit();
     dfc:	0e 94 16 04 	call	0x82c	; 0x82c <GLCD_voidInit>
	TMR2_voidInit();
     e00:	0e 94 32 07 	call	0xe64	; 0xe64 <TMR2_voidInit>
	
	/*	Asynchronous Mode Disabled		*/
	TMR2_voidDisableAsynchronous();
     e04:	0e 94 6e 07 	call	0xedc	; 0xedc <TMR2_voidDisableAsynchronous>
	
	/*	Initial value to TCNT2, controls frequency		*/
	TMR2_voidWriteTCNT(0);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 4b 07 	call	0xe96	; 0xe96 <TMR2_voidWriteTCNT>
	TMR2_voidWriteOCR2(240);
     e0e:	80 ef       	ldi	r24, 0xF0	; 240
     e10:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TMR2_voidWriteOCR2>
	
	DisplayGraph(8, F_CPU);
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	54 e2       	ldi	r21, 0x24	; 36
     e18:	64 ef       	ldi	r22, 0xF4	; 244
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <DisplayGraph>
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	85 ea       	ldi	r24, 0xA5	; 165
     e26:	9e e0       	ldi	r25, 0x0E	; 14
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	80 40       	sbci	r24, 0x00	; 0
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <main+0x4a>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <main+0x54>
     e32:	00 00       	nop

	_delay_ms(300);
	GLCD_voidClearAll();
     e34:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <GLCD_voidClearAll>
	
	/*	Asynchronous Mode Enabled		*/
	TMR2_voidEnableAsynchronous();
     e38:	0e 94 58 07 	call	0xeb0	; 0xeb0 <TMR2_voidEnableAsynchronous>
	
	/*	Initial value to TCNT2, controls frequency		*/
	TMR2_voidWriteTCNT(0);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 4b 07 	call	0xe96	; 0xe96 <TMR2_voidWriteTCNT>
	TMR2_voidWriteOCR2(200);
     e42:	88 ec       	ldi	r24, 0xC8	; 200
     e44:	0e 94 4d 07 	call	0xe9a	; 0xe9a <TMR2_voidWriteOCR2>
	
	GLCD_voidClearPage(0);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <GLCD_voidClearPage>
	GLCD_voidClearPage(1);			// To avoid ghost remaining characters
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <GLCD_voidClearPage>
	
	DisplayGraph(8, 32768);		// 32.768 KHz from Crystal Oscillator
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	50 e8       	ldi	r21, 0x80	; 128
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	88 e0       	ldi	r24, 0x08	; 8
     e5e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <DisplayGraph>
     e62:	ff cf       	rjmp	.-2      	; 0xe62 <main+0x84>

00000e64 <TMR2_voidInit>:
     e64:	85 b5       	in	r24, 0x25	; 37
     e66:	8f 77       	andi	r24, 0x7F	; 127
     e68:	85 bd       	out	0x25, r24	; 37
     e6a:	85 b5       	in	r24, 0x25	; 37
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	85 bd       	out	0x25, r24	; 37
     e70:	85 b5       	in	r24, 0x25	; 37
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	85 bd       	out	0x25, r24	; 37
     e76:	85 b5       	in	r24, 0x25	; 37
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	85 bd       	out	0x25, r24	; 37
     e7c:	85 b5       	in	r24, 0x25	; 37
     e7e:	80 62       	ori	r24, 0x20	; 32
     e80:	85 bd       	out	0x25, r24	; 37
     e82:	85 b5       	in	r24, 0x25	; 37
     e84:	8e 7f       	andi	r24, 0xFE	; 254
     e86:	85 bd       	out	0x25, r24	; 37
     e88:	85 b5       	in	r24, 0x25	; 37
     e8a:	8d 7f       	andi	r24, 0xFD	; 253
     e8c:	85 bd       	out	0x25, r24	; 37
     e8e:	85 b5       	in	r24, 0x25	; 37
     e90:	84 60       	ori	r24, 0x04	; 4
     e92:	85 bd       	out	0x25, r24	; 37
     e94:	08 95       	ret

00000e96 <TMR2_voidWriteTCNT>:
     e96:	84 bd       	out	0x24, r24	; 36
     e98:	08 95       	ret

00000e9a <TMR2_voidWriteOCR2>:
     e9a:	83 bd       	out	0x23, r24	; 35
     e9c:	08 95       	ret

00000e9e <TMR2_u8ReadOCR2>:
     e9e:	83 b5       	in	r24, 0x23	; 35
     ea0:	08 95       	ret

00000ea2 <TMR2_u8ReadCompareOuputMode>:
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	08 95       	ret

00000ea6 <TMR2_u16ReadPrescalerMode>:
     ea6:	80 e4       	ldi	r24, 0x40	; 64
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	08 95       	ret

00000eac <TMR2_ReadWaveGenerMode>:
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	08 95       	ret

00000eb0 <TMR2_voidEnableAsynchronous>:
     eb0:	89 b7       	in	r24, 0x39	; 57
     eb2:	8f 7b       	andi	r24, 0xBF	; 191
     eb4:	89 bf       	out	0x39, r24	; 57
     eb6:	89 b7       	in	r24, 0x39	; 57
     eb8:	8f 77       	andi	r24, 0x7F	; 127
     eba:	89 bf       	out	0x39, r24	; 57
     ebc:	82 b5       	in	r24, 0x22	; 34
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	82 bd       	out	0x22, r24	; 34
     ec2:	02 b4       	in	r0, 0x22	; 34
     ec4:	00 fc       	sbrc	r0, 0
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <TMR2_voidEnableAsynchronous+0x12>
     ec8:	02 b4       	in	r0, 0x22	; 34
     eca:	01 fc       	sbrc	r0, 1
     ecc:	fd cf       	rjmp	.-6      	; 0xec8 <TMR2_voidEnableAsynchronous+0x18>
     ece:	02 b4       	in	r0, 0x22	; 34
     ed0:	02 fc       	sbrc	r0, 2
     ed2:	fd cf       	rjmp	.-6      	; 0xece <TMR2_voidEnableAsynchronous+0x1e>
     ed4:	88 b7       	in	r24, 0x38	; 56
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	88 bf       	out	0x38, r24	; 56
     eda:	08 95       	ret

00000edc <TMR2_voidDisableAsynchronous>:
     edc:	89 b7       	in	r24, 0x39	; 57
     ede:	8f 7b       	andi	r24, 0xBF	; 191
     ee0:	89 bf       	out	0x39, r24	; 57
     ee2:	89 b7       	in	r24, 0x39	; 57
     ee4:	8f 77       	andi	r24, 0x7F	; 127
     ee6:	89 bf       	out	0x39, r24	; 57
     ee8:	82 b5       	in	r24, 0x22	; 34
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	82 bd       	out	0x22, r24	; 34
     eee:	88 b7       	in	r24, 0x38	; 56
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	88 bf       	out	0x38, r24	; 56
     ef4:	08 95       	ret

00000ef6 <__vector_5>:
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	2f 93       	push	r18
     f02:	3f 93       	push	r19
     f04:	4f 93       	push	r20
     f06:	5f 93       	push	r21
     f08:	6f 93       	push	r22
     f0a:	7f 93       	push	r23
     f0c:	8f 93       	push	r24
     f0e:	9f 93       	push	r25
     f10:	af 93       	push	r26
     f12:	bf 93       	push	r27
     f14:	ef 93       	push	r30
     f16:	ff 93       	push	r31
     f18:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <TMR2_Callback>
     f1c:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <TMR2_Callback+0x1>
     f20:	09 95       	icall
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__udivmodqi4>:
     f44:	99 1b       	sub	r25, r25
     f46:	79 e0       	ldi	r23, 0x09	; 9
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <__udivmodqi4_ep>

00000f4a <__udivmodqi4_loop>:
     f4a:	99 1f       	adc	r25, r25
     f4c:	96 17       	cp	r25, r22
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__udivmodqi4_ep>
     f50:	96 1b       	sub	r25, r22

00000f52 <__udivmodqi4_ep>:
     f52:	88 1f       	adc	r24, r24
     f54:	7a 95       	dec	r23
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__udivmodqi4_loop>
     f58:	80 95       	com	r24
     f5a:	08 95       	ret

00000f5c <__udivmodhi4>:
     f5c:	aa 1b       	sub	r26, r26
     f5e:	bb 1b       	sub	r27, r27
     f60:	51 e1       	ldi	r21, 0x11	; 17
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <__udivmodhi4_ep>

00000f64 <__udivmodhi4_loop>:
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	a6 17       	cp	r26, r22
     f6a:	b7 07       	cpc	r27, r23
     f6c:	10 f0       	brcs	.+4      	; 0xf72 <__udivmodhi4_ep>
     f6e:	a6 1b       	sub	r26, r22
     f70:	b7 0b       	sbc	r27, r23

00000f72 <__udivmodhi4_ep>:
     f72:	88 1f       	adc	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	5a 95       	dec	r21
     f78:	a9 f7       	brne	.-22     	; 0xf64 <__udivmodhi4_loop>
     f7a:	80 95       	com	r24
     f7c:	90 95       	com	r25
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	08 95       	ret

00000f84 <__divmodhi4>:
     f84:	97 fb       	bst	r25, 7
     f86:	07 2e       	mov	r0, r23
     f88:	16 f4       	brtc	.+4      	; 0xf8e <__divmodhi4+0xa>
     f8a:	00 94       	com	r0
     f8c:	07 d0       	rcall	.+14     	; 0xf9c <__divmodhi4_neg1>
     f8e:	77 fd       	sbrc	r23, 7
     f90:	09 d0       	rcall	.+18     	; 0xfa4 <__divmodhi4_neg2>
     f92:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodhi4>
     f96:	07 fc       	sbrc	r0, 7
     f98:	05 d0       	rcall	.+10     	; 0xfa4 <__divmodhi4_neg2>
     f9a:	3e f4       	brtc	.+14     	; 0xfaa <__divmodhi4_exit>

00000f9c <__divmodhi4_neg1>:
     f9c:	90 95       	com	r25
     f9e:	81 95       	neg	r24
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__divmodhi4_neg2>:
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255

00000faa <__divmodhi4_exit>:
     faa:	08 95       	ret

00000fac <__udivmodsi4>:
     fac:	a1 e2       	ldi	r26, 0x21	; 33
     fae:	1a 2e       	mov	r1, r26
     fb0:	aa 1b       	sub	r26, r26
     fb2:	bb 1b       	sub	r27, r27
     fb4:	fd 01       	movw	r30, r26
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <__udivmodsi4_ep>

00000fb8 <__udivmodsi4_loop>:
     fb8:	aa 1f       	adc	r26, r26
     fba:	bb 1f       	adc	r27, r27
     fbc:	ee 1f       	adc	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	a2 17       	cp	r26, r18
     fc2:	b3 07       	cpc	r27, r19
     fc4:	e4 07       	cpc	r30, r20
     fc6:	f5 07       	cpc	r31, r21
     fc8:	20 f0       	brcs	.+8      	; 0xfd2 <__udivmodsi4_ep>
     fca:	a2 1b       	sub	r26, r18
     fcc:	b3 0b       	sbc	r27, r19
     fce:	e4 0b       	sbc	r30, r20
     fd0:	f5 0b       	sbc	r31, r21

00000fd2 <__udivmodsi4_ep>:
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	1a 94       	dec	r1
     fdc:	69 f7       	brne	.-38     	; 0xfb8 <__udivmodsi4_loop>
     fde:	60 95       	com	r22
     fe0:	70 95       	com	r23
     fe2:	80 95       	com	r24
     fe4:	90 95       	com	r25
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	bd 01       	movw	r22, r26
     fec:	cf 01       	movw	r24, r30
     fee:	08 95       	ret

00000ff0 <__divmodsi4>:
     ff0:	05 2e       	mov	r0, r21
     ff2:	97 fb       	bst	r25, 7
     ff4:	1e f4       	brtc	.+6      	; 0xffc <__divmodsi4+0xc>
     ff6:	00 94       	com	r0
     ff8:	0e 94 0f 08 	call	0x101e	; 0x101e <__negsi2>
     ffc:	57 fd       	sbrc	r21, 7
     ffe:	07 d0       	rcall	.+14     	; 0x100e <__divmodsi4_neg2>
    1000:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodsi4>
    1004:	07 fc       	sbrc	r0, 7
    1006:	03 d0       	rcall	.+6      	; 0x100e <__divmodsi4_neg2>
    1008:	4e f4       	brtc	.+18     	; 0x101c <__divmodsi4_exit>
    100a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__negsi2>

0000100e <__divmodsi4_neg2>:
    100e:	50 95       	com	r21
    1010:	40 95       	com	r20
    1012:	30 95       	com	r19
    1014:	21 95       	neg	r18
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	4f 4f       	sbci	r20, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255

0000101c <__divmodsi4_exit>:
    101c:	08 95       	ret

0000101e <__negsi2>:
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__umulhisi3>:
    102e:	a2 9f       	mul	r26, r18
    1030:	b0 01       	movw	r22, r0
    1032:	b3 9f       	mul	r27, r19
    1034:	c0 01       	movw	r24, r0
    1036:	a3 9f       	mul	r26, r19
    1038:	70 0d       	add	r23, r0
    103a:	81 1d       	adc	r24, r1
    103c:	11 24       	eor	r1, r1
    103e:	91 1d       	adc	r25, r1
    1040:	b2 9f       	mul	r27, r18
    1042:	70 0d       	add	r23, r0
    1044:	81 1d       	adc	r24, r1
    1046:	11 24       	eor	r1, r1
    1048:	91 1d       	adc	r25, r1
    104a:	08 95       	ret

0000104c <__muluhisi3>:
    104c:	0e 94 17 08 	call	0x102e	; 0x102e <__umulhisi3>
    1050:	a5 9f       	mul	r26, r21
    1052:	90 0d       	add	r25, r0
    1054:	b4 9f       	mul	r27, r20
    1056:	90 0d       	add	r25, r0
    1058:	a4 9f       	mul	r26, r20
    105a:	80 0d       	add	r24, r0
    105c:	91 1d       	adc	r25, r1
    105e:	11 24       	eor	r1, r1
    1060:	08 95       	ret

00001062 <_exit>:
    1062:	f8 94       	cli

00001064 <__stop_program>:
    1064:	ff cf       	rjmp	.-2      	; 0x1064 <__stop_program>
